from ultralytics import YOLO
import cv2
import numpy as np
from PIL import Image
import io
from fastapi import FastAPI, File, UploadFile, Form, HTTPException, Request, Depends, Security
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.responses import StreamingResponse, HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
import json
from typing import Optional
from pydantic import BaseModel
import glob
import os
#import torch
#torch.cuda.is_available = lambda : False  # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ CPU –¥–ª—è PyTorch
from bboxes import draw_boxes


default_mdl_path = './models/'  # –ü—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –º–æ–¥–µ–ª–∏
# –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω–æ!
FAKE_TOKEN = "goodroad"
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

app = FastAPI(title="Potholes Detection System API", version="0.1.0", debug=True)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def token_auth(token: str = Depends(oauth2_scheme)):
    if token != FAKE_TOKEN:
        raise HTTPException(
            status_code=401,
            detail="üìµ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )
    return token

def get_latest_model(path):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–µ–ª–∏
    list_of_files = glob.glob(f'{path}*.pt')
    if not list_of_files:
        return None  # –ù–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    latest_model = max(list_of_files, key=os.path.getctime)  # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
    print(f'‚ôªÔ∏è  Latest Model: {latest_model}')
    return latest_model


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
#app.mount('/static', StaticFiles(directory="static"), name="static")
#templates = Jinja2Templates(directory="templates")


#@app.get("/", response_class=HTMLResponse)
#async def read_root(request: Request):
#    ## return templates.TemplateResponse("index.html", {"request": request})
#    #model_files_response = list_models()
#    #model_files = model_files_response.body  # –í—ã—Ç–∞—â–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSONResponse
#    #model_files_dict = json.loads(model_files.decode())  # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å
#    model_files = list_models()  # —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
#    print(f"\nüõí –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {model_files['Models']}")
#    return templates.TemplateResponse("index.html", {"request": request, "models": model_files['Models']})


@app.get("/")
async def read_root(request: Request):
    forwarded_for = request.headers.get("x-forwarded-for")
    if forwarded_for:
        client_host = forwarded_for.split(",")[0]
    else:
        client_host = request.client.host
    return {"üì° Client IP: ": client_host}


@app.get('/info')
def read_root():
    return {'Project 2023': 'Pothole Detection [Moscow, 2023 –≥.]'}


@app.get('/models')
def list_models(token: str = Depends(token_auth)):
    models_dir = "models"
    models = []

    sorted_files = sorted(os.listdir(models_dir))

    for filename in sorted_files:
        if filename.endswith(".h5") or filename.endswith(".pt"):  # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π
            models.append(filename)
    #return JSONResponse(content={"Models": models})
    return {"Models": models}


@app.post('/predict')
#async def predict(file: UploadFile = File(...), mdl_name: Optional[str] = Form(None), token: str = Depends(token_auth)):  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
#async def predict(file: UploadFile = File(...), mdl_name: Optional[str] = Form(None)):
async def predict(file: UploadFile = File(...), mdl_name: str = Form('./default/best.pt')):
    print("... Received model name:", mdl_name) # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ !!!
    image_stream = io.BytesIO(await file.read())
    image_stream.seek(0)
    image = cv2.imdecode(np.frombuffer(image_stream.read(), np.uint8), 1)
    image_stream.close()

    if image is None:
        return {"error": "Invalid image file"}

    # –ï—Å–ª–∏ –∏–º—è –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    if mdl_name:
        selected_model = os.path.join(default_mdl_path, mdl_name)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
        if not os.path.exists(selected_model):
            selected_model = get_latest_model(default_mdl_path)
        print(f'‚öñÔ∏è  Selected Model: {selected_model}')
    else:
        selected_model = get_latest_model(default_mdl_path)

    if selected_model is None:
        return {"error": "No model files found"}

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ –ø–∞–º—è—Ç—å
    model = YOLO(selected_model) # if selected_model else None
    results = model.predict(source=image, conf=0.35, )
    image = draw_boxes(image, results)

    is_success, buffer = cv2.imencode(".jpg", image)
    if not is_success:
        return {"error": "Failed to save the image"}

    io_buf = io.BytesIO(buffer)
    io_buf.seek(0)
    return StreamingResponse(io_buf, media_type="image/jpeg", headers={"Content-Disposition": f"inline; filename=result.jpg"})


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
