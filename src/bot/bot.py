from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CancelHandler
import logging
import requests
import asyncio
import aiohttp
from aiohttp import ClientSession, ClientTimeout
import json
from dotenv import load_dotenv
from io import BytesIO
from datetime import datetime
from PIL import Image
import os
from tools import load_servers_list, update_env_variable
from text_module import commands, help_text

# Load environment variables
load_dotenv()
API_TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID = os.getenv("CHAT_ID")
token = os.getenv("FastAPI_TOKEN")


#ACCESS_LIST = os.getenv("ACCESS_LIST")
#ACCESS_LIST = list(map(int, os.getenv("ACCESS_LIST", "").split(",")))
ACCESS_LIST = list(map(int, os.getenv("ACCESS_LIST").split(",")))
blocked_users = set()  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# print(f'... ACCESS_LIST: {ACCESS_LIST}')
log_folder = os.getenv("LOG_DIR")
log_file = os.getenv("LOG_FILE")


if not API_TOKEN:
    raise ValueError("TG_TOKEN is not set in the environment variables or .env file!")
if not os.path.exists(log_folder):  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(log_folder)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(f"{log_folder}/{log_file}"),
        logging.StreamHandler()
    ]
)

class AccessMiddleware(BaseMiddleware):  # –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ù–ê –õ–Æ–ë–´–ï –î–ï–ô–°–¢–í–ò–Ø –° –ë–û–¢–û–ú!!!
    def __init__(self, access_list):
        self.access_list = access_list
        super().__init__()
        #super(AccessMiddleware, self).__init__()

    async def on_pre_process_message(self, message: types.Message, data: dict):
        user_id = message.from_user.id
        logging.info(f"msg from: {user_id} ({message.from_user.full_name})")
        # print(f' ----- {user_id}: {self.access_list}')

        if user_id not in self.access_list:
            add_text = f"–£–≤–∞–∂–∞–µ–º—ã–π, <b>{message.from_user.full_name}</b> [<code>{message.from_user.username}</code>]!\n"
            add_text += f"–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n–î–æ—Å—Ç—É–ø —Å –≤–∞—à–µ–≥–æ <b>ID</b> [<code>{user_id}</code>] –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!"
            # add_text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
            await message.answer(f"{add_text}", parse_mode="HTML")
            blocked_users.add(user_id)  # –¥–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ set
            update_env_variable("BLOKED_LIST", ','.join(map(str, blocked_users)))
            print(f'... blocked_users: {blocked_users}')
            raise CancelHandler()  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è "–Ω–∞—Å—Ç–æ–π—á–∏–≤–æ–≥–æ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            #return True  # True –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        return False  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ 

#logging.basicConfig(level=logging.DEBUG)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è DEBUG !!!
#logging.basicConfig(level=logging.INFO)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è INFO
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(AccessMiddleware(ACCESS_LIST))

#API_URL = 'http://api-serv.ru:8001'
#API_URL = 'http://195.91.179.130:33021'
#API_URL = os.getenv("API_URL")
servers_list = load_servers_list(bot)


async def on_startup(dp):
    bot_info = await dp.bot.get_me()
    bot_name = bot_info.username
    user_id = bot_info.id
    await dp.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f'‚ú¥Ô∏è –ë–æ—Ç @{bot_name} –∑–∞–ø—É—â–µ–Ω!\nüà≤ Main Server: ciet')
    print(f'‚ú¥Ô∏è  –ë–æ—Ç {bot_name} –∑–∞–ø—É—â–µ–Ω!')
    if user_id not in ACCESS_LIST:
        await dp.bot.set_my_commands(commands)


#async def fetch(session, url):
async def fetch(session, url, token=None):
    """
    import aiohttp  # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiohttp –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ HTTP-–∫–ª–∏–µ–Ω—Ç–∞
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ GET-–∑–∞–ø—Ä–æ—Å–∞.
    –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∫–ª–∏–µ–Ω—Ç aiohttp –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–∞.
    –§—É–Ω–∫—Ü–∏—è fetch –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä aiohttp.ClientSession –∏ URL.
    –ó–∞—Ç–µ–º –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ –¥–∞–Ω–Ω–æ–º—É URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - session (aiohttp.ClientSession): —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    - url (str): URL, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å GET-–∑–∞–ø—Ä–æ—Å
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - str: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    """
    #headers = {'Authorization': f'Bearer {token}'}
    #async with session.get(url, headers=headers) as response:
    ##async with session.get(url) as response:  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–∞
    #    return await response.text()          # –í–æ–∑–≤—Ä–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

    headers = {}
    if token:
        headers['Authorization'] = f'Bearer {token}'

    async with session.get(url, headers=headers) as response:
        return await response.text()


@dp.message_handler(commands=['start','info'])
async def send_info(message: types.Message):
    API_URL = os.getenv("API_URL")  #  –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞
    print(f' ... API_URL/info: {API_URL}')
    timeout = ClientTimeout(total=5)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –≤ 5 —Å–µ–∫—É–Ω–¥
    async with aiohttp.ClientSession(timeout=timeout) as session:
        try:
            info = await fetch(session, f'{API_URL}/info') 
            data = json.loads(info)["Project 2023"]
            await message.answer(f"üî∞ <b>Project Info:</b>\n<pre>{data}</pre>", parse_mode="HTML", reply_markup=keyboard)
        except Exception as e:
            print(f"info ------ Error occurred: {e}")
            await message.answer(f"‚õîÔ∏è –°–µ—Ä–≤–µ—Ä <b>FastAPI</b> –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n{e}", parse_mode="HTML", reply_markup=keyboard)



# ++++++++++++++++++++ Main KeyBoard ++++++++++++++++
# –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.row(KeyboardButton('üì°Server'), KeyboardButton('‚öñÔ∏èModel'), KeyboardButton('ü™¨INFO'), KeyboardButton('üí°HELP'))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(lambda message: message.text == '‚öñÔ∏èModel')
async def handle_model(message: types.Message):
    await send_models(message)

@dp.message_handler(lambda message: message.text == 'ü™¨INFO')
async def handle_info(message: types.Message):
    await send_info(message)

@dp.message_handler(lambda message: message.text == 'üí°HELP')
async def handle_help(message: types.Message):
    #await send_help(message)
    await message.reply(help_text, parse_mode="Markdown")


# ++++++++++++ SERVERS +++++++++++++++++
@dp.message_handler(lambda message: message.text == 'üì°Server')
async def choose_server(message: types.Message):
    API_URL = os.getenv("API_URL")  #  –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞ 

    markup = InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤
    if servers_list:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–ø–∏—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
        for server in servers_list:
            server_name = server['name']
            server_url = server['url']
            prefix = "üü© " if server_url == API_URL else "‚¨úÔ∏è "
            markup.add(InlineKeyboardButton(f"{prefix}{server_name}", callback_data=f"server_{server_url}"))

        update_env_variable("API_URL", API_URL)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ .env —Ñ–∞–∏ÃÜ–ª !!!
        print(f' ......... Server: {API_URL}')
        current_time = datetime.now().strftime("%H:%M:%S")
        msg = f"üì° –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞...\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>[{current_time}</b>]"
        await message.answer(msg, parse_mode="HTML", reply_markup=markup)
    else:
        await message.answer("‚≠ïÔ∏è –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ <b>–ø—É—Å—Ç</b>.", parse_mode="HTML")


@dp.callback_query_handler(lambda call: call.data.startswith("server_"))  # !! –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–∏–ø–∞–º–∏ callback_data !!
async def servers_callback_inline(call: CallbackQuery):
    API_URL = os.getenv("API_URL")  #  –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞
    current_time = datetime.now().strftime("%H:%M:%S")
    if call.data.startswith("server_"):
        server_url = call.data[7:]
        server_name = [s['name'] for s in servers_list if s['url'] == server_url]
        if server_url == API_URL:
            await call.answer(f"[{current_time}] –°–µ—Ä–≤–µ—Ä {server_name} —É–∂–µ –≤—ã–±—Ä–∞–Ω")
        else:
            await change_server(call, server_url)


async def change_server(call: CallbackQuery, new_server_url: str):
    API_URL = new_server_url
    update_env_variable("API_URL", API_URL)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ .env —Ñ–∞–∏ÃÜ–ª !!!
    print(f' ..... New Server: {API_URL}')

    current_time = datetime.now().strftime("%H:%M:%S")
    msg = f'üì° –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞...\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{current_time}</b>'

    markup = InlineKeyboardMarkup()
    for server in servers_list:
        prefix = "üü© " if server['url'] == API_URL else "‚¨úÔ∏è "
        markup.add(InlineKeyboardButton(f"{prefix}{server['name']}", callback_data=f"server_{server['url']}"))

    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text = msg,
        reply_markup=markup,
        parse_mode="HTML"
    )
    await call.answer(f"üü© –°–µ—Ä–≤–µ—Ä {new_server_url} –≤—ã–±—Ä–∞–Ω!")


# ++++++++++ MODELS ++++++++++++++
@dp.message_handler(commands=['models'])
async def send_models(message: types.Message):
    API_URL = os.getenv("API_URL")  #  –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π API_URL –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞
    BEST_MODEL = os.getenv("mdl_name")  #  –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π mdl_name –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞
    # models_list = os.getenv("models_list")  #  –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞
    timeout = ClientTimeout(total=10)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –≤ 10 —Å–µ–∫—É–Ω–¥

    async with aiohttp.ClientSession(timeout=timeout) as session:  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ HTTP
        try:
            print(f'1. ... API_URL/models: {API_URL}/models')
            #Models = json.loads(await fetch(session, f'{API_URL}/models'))  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
            Models = json.loads(await fetch(session, f'{API_URL}/models', token))  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π + token –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ FastAPI
            print(f'2. ... Models: {Models}')
            models_list = Models['Models']
            markup = InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
            #print(f"3. ===> models_list: {models_list}")

            if models_list:
                if BEST_MODEL in models_list:
                    mdl_name = BEST_MODEL
                    #print(f'4a. .... Best Model: {mdl_name}')
                else:
                    mdl_name = models_list[-1]
                    #print(f'4b. .... Best Model: {mdl_name}')

                for model in models_list:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ inline-–∫–Ω–æ–ø–æ–∫ —Å –º–æ–¥–µ–ª—è–º–∏ –≤ —Ä–∞–∑–º–µ—Ç–∫—É
                    prefix = "üü¢ " if model == mdl_name else "‚ö™Ô∏è "
                    markup.add(InlineKeyboardButton(f"{prefix}{model}", callback_data=model))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω callback_data —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º model

                update_env_variable("mdl_name", mdl_name)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å mdl_name –≤ .env —Ñ–∞–∏ÃÜ–ª !!!
                # update_env_variable("models_list", models_list)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π models_list –≤ .env —Ñ–∞–∏ÃÜ–ª !!!
                update_env_variable("models_list", ','.join(models_list))  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π models_list –≤ .env —Ñ–∞–∏ÃÜ–ª !!!
                #print(f"5. ......... Models: {','.join(models_list)}")
                current_time = datetime.now().strftime("%H:%M:%S")
                msg = f"ü™© –í—ã–±–æ—Ä –Ω–µ–π—Ä–æ–º–æ–¥–µ–ª–∏...\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>[{current_time}</b>]"
                await message.answer(msg, parse_mode="HTML", reply_markup=markup)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏

            else:
                await message.answer("‚≠ïÔ∏è –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π <b>–ø—É—Å—Ç</b>.", parse_mode="HTML")
        except Exception as e:
            await message.answer("‚õî –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.\n{e}")


@dp.callback_query_handler(lambda call: not call.data.startswith("server_"))   # !! –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–∏–ø–∞–º–∏ callback_data !!
async def models_callback_inline(call: CallbackQuery):
    BEST_MODEL = os.getenv("mdl_name")  #  –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π mdl_name –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞
    current_time = datetime.now().strftime("%H:%M:%S")
    if call.data == BEST_MODEL:
        await call.answer(f"[{current_time}] –ú–æ–¥–µ–ª—å {BEST_MODEL} —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞!")
    else:
        print(type(call.data), call.data)
        await change_model(call, call.data)


async def change_model(call: CallbackQuery, new_model: str):
    mdl_name = new_model
    #print(f'X1 ..... New Model: {mdl_name}')
    update_env_variable("mdl_name", mdl_name)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å mdl_name –≤ .env —Ñ–∞–∏ÃÜ–ª !!!
    models_list = os.getenv("models_list").split(',')  #  –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞ 
    print(f' ......... New Model: {mdl_name}')
    #print(f' ....... models_list: {models_list}')

    current_time = datetime.now().strftime("%H:%M:%S")
    msg = f'ü™© –í—ã–±–æ—Ä –Ω–µ–π—Ä–æ–º–æ–¥–µ–ª–∏...\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{current_time}</b>'

    markup = InlineKeyboardMarkup()
    #for model in models_list['Models']:  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è (–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç FastAPI)
    for model in models_list:
        prefix = "üü¢ " if model == mdl_name else "‚ö™Ô∏è "
        markup.add(InlineKeyboardButton(f"{prefix}{model}", callback_data=model))

    # await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text = msg,
        reply_markup=markup,
        parse_mode="HTML"
    )
    await call.answer(f"üü¢ –ú–æ–¥–µ–ª—å {mdl_name} –≤—ã–±—Ä–∞–Ω–∞!")


# +++++++++++++++ PHOTO +++++++++++++++
# handler for receiving images and making POST requests to FastAPI
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def process_image(message: types.Message):
    API_URL = os.getenv("API_URL")  #  –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π API_URL –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞
    mdl_name = os.getenv("mdl_name")  #  –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π mdl_name –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞

    file_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 
    file = await bot.get_file(file_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ñ–∞–∏ÃÜ–ª–∞ 
    file_path = file.file_path  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–∏ÃÜ–ª—É 
    # print(f'1 ......... {file_path}')

    image_data = await bot.download_file(file_path)  # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    url = f'{API_URL}/predict'  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä 
    # print(f'2 ====== {url}')

    timeout = ClientTimeout(total=15)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –≤ 15 —Å–µ–∫—É–Ω–¥
    async with aiohttp.ClientSession(timeout=timeout) as session:  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ HTTP
    # async with ClientSession() as session:  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ HTTP 
        form = aiohttp.FormData()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã 
        form.add_field('file', image_data, filename='input_image.jpg', content_type='image/jpg')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É 
        form.add_field('mdl_name', mdl_name)
        try:
            # async with session.post(url, data=form, timeout=30) as response:
            async with session.post(url, data=form) as response:
                # print(f'3 ====== {response.status}')
                if response.status == 200:
                    output_image_data = BytesIO(await response.read())
                    output_image_data.seek(0)
                    msg = f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n–ú–æ–¥–µ–ª—å: <b>{mdl_name}</b>"
                    await message.reply_photo(photo=output_image_data, caption=msg, parse_mode="HTML")
        except Exception as e:
            print(f"predict ------ ‚õîÔ∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            await message.answer(f"‚õîÔ∏è –°–µ—Ä–≤–µ—Ä <b>FastAPI [{API_URL}]</b> –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n‚åõÔ∏è Timeout=<b>{timeout} s</b>\n{e}", parse_mode="HTML")

    #if response.status_code == 200:
    #    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    #    output_image_data = BytesIO(response.content)
    #    output_image_data.seek(0)
    #    await message.reply_photo(photo=output_image_data, caption="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


# +++++++++++++++ TOOLS [/id, /list, /add, /help] +++++++++++++++
@dp.message_handler(commands=['id'])
async def send_welcome(message: types.Message):
    my_str = (f"üë§ {message.from_user.full_name} [<code>{message.from_user.username}</code>] ->\n"
              f"üÜî <b>User ID:</b> <code>{message.from_user.id}</code>\n"
              f"üë• <b>Chat ID:</b> <code>{message.chat.id}</code>")
    await message.reply(my_str, parse_mode="HTML")


@dp.message_handler(lambda message: message.forward_from)
async def handle_forwarded_message(message: types.Message):
    original_user_id = message.forward_from.id
    chat_id = message.chat.id
    u_name = message.forward_from.username
    f_name = message.forward_from.full_name

    response_str = (f"üë§ <b>{f_name}</b> [<code>@{u_name}</code>]  ->\n"
                    f"üÜî <b>Forwarded User ID:</b> <code>{original_user_id}</code>\n"
                    f"üë• <b>Chat ID:</b> <code>{chat_id}</code>")
    await message.reply(response_str, parse_mode="HTML")

@dp.message_handler(commands=['list'])
async def send_access_list(message: types.Message):
    ACCESS_LIST = os.getenv("ACCESS_LIST")
    if ACCESS_LIST:
        access_list = ACCESS_LIST.split(',')
        formatted_list = ' '.join([f"<code>{x.strip()}</code>" for x in access_list])
        await message.answer(f"‚ùáÔ∏è <b>ACCESS_LIST</b>:\n{formatted_list}", parse_mode="HTML")
    else:
        await message.answer("‚ö†Ô∏è ACCESS_LIST –ø—É—Å—Ç.", parse_mode="HTML")


@dp.message_handler(lambda message: message.text.startswith('/add'))
async def add_to_access_list(message: types.Message):
    user_command = message.text.split()
    if len(user_command) != 2:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add [ID].")
        return

    try:
        new_id = int(user_command[1])  # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID –≤ —á–∏—Å–ª–æ
    except ValueError:
        await message.answer("‚ö†Ô∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    ACCESS_LIST = os.getenv("ACCESS_LIST")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ACCESS_LIST –∏–∑ .env —Ñ–∞–π–ª–∞

    if ACCESS_LIST:
        access_list = list(map(int, ACCESS_LIST.split(',')))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
    else:
        access_list = []

    if new_id not in access_list:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
        access_list.append(new_id)
        new_access_list = ','.join(map(str, access_list))
        update_env_variable('ACCESS_LIST', new_access_list)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π ACCESS_LIST –≤ .env —Ñ–∞–π–ª
        await message.answer("‚úÖ –í–∞—à ID –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ ACCESS_LIST.")
    else:
        await message.answer("‚ö†Ô∏è –í–∞—à ID —É–∂–µ –µ—Å—Ç—å –≤ ACCESS_LIST.")


@dp.message_handler(lambda message: message.text.startswith('/del'))
async def del_from_access_list(message: types.Message):
    user_command = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ '/del'

    if len(user_command) < 1:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /del [ID1] [ID2] ...")
        return

    ACCESS_LIST = os.getenv("ACCESS_LIST")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ACCESS_LIST –∏–∑ .env —Ñ–∞–π–ª–∞

    if ACCESS_LIST:
        access_list = list(map(int, ACCESS_LIST.split(',')))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
    else:
        await message.answer("‚ö†Ô∏è ACCESS_LIST –ø—É—Å—Ç.")
        return

    deleted_ids = []
    not_found_ids = []

    for str_id in user_command:
        try:
            del_id = int(str_id)  # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —á–∏—Å–ª–æ
        except ValueError:
            await message.answer(f"‚ö†Ô∏è ID {str_id} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        if del_id in access_list:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ID –≤ ACCESS_LIST
            access_list.remove(del_id)
            deleted_ids.append(str(del_id))
        else:
            not_found_ids.append(str(del_id))

    if deleted_ids:
        new_access_list = ','.join(map(str, access_list))
        update_env_variable('ACCESS_LIST', new_access_list)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π ACCESS_LIST –≤ .env —Ñ–∞–π–ª
        await message.answer(f"‚ùé ID {', '.join(deleted_ids)} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ ACCESS_LIST.")

    if not_found_ids:
        await message.answer(f"‚ö†Ô∏è ID {', '.join(not_found_ids)} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ACCESS_LIST.")


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.answer(help_text, parse_mode="Markdown")


# +++++++++++++ MAIN +++++++++++++
async def main():
    await on_startup(dp)
    await dp.start_polling()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ 

if __name__ == '__main__':
    asyncio.run(main())
